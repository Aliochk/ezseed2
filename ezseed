#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , colors = require('colors')
  , promptly = require('promptly')
  , exec = require('child_process').exec
  , spawn = require('child_process').spawn
  , _ = require('underscore')
  , fs = require('fs')
  , pathInfo = require('path')
  , async = require('async')
  , db = require('./app/core/database.js')
  , jf = require('jsonfile')
  , cache = require('memory-cache')
  , mongoose = require('mongoose')
  ;

colors.setTheme({
  silly: 'rainbow',
  input: 'grey',
  verbose: 'cyan',
  prompt: 'grey',
  info: 'cyan',
  data: 'grey',
  help: 'cyan',
  warn: 'yellow',
  debug: 'blue',
  error: 'red'
});

program
	.version('0.1.0');

var ASCII = new Buffer("\
	   ___  ___  ___  ___  ___  ___     _  _  ___    \n\
	  (  _)(_  )/ __)(  _)(  _)(   \\   ( )( )(__ \\   \n\
	   ) _) / / \\__ \\ ) _) ) _) ) ) )   \\\\// / __/   \n\
	  (___)(___)(___/(___)(___)(___/    (__) \\___)   \n\
	  									   \n\
").toString();

console.log(ASCII.yellow.bold);
console.log("Made with love by ".magenta + "soyuka".bold.magenta);
console.log("Big Thanks too : ".magenta + "Gaaa".rainbow +" (rutorrent), ".magenta +"Lines".rainbow +" (design), ".magenta +"Jay_kay".rainbow +" (ideas), ".magenta + "LeBedouin".rainbow +" ($$), ".magenta + "Winux".rainbow +", ".magenta + "H4T".rainbow +", ".magenta + "Ulule participants".rainbow +", ".magenta + "wouya (<3)".rainbow +" !".magenta)

/**
 * Prompt validators
 * @type {Object}
 */
var validators = {
	user : function(v) {
		if(!v.match(/^[a-zA-Z0-9-_]{3,15}$/))
			throw new Error("Le nom d'utilisateur ne peut contenir que des caractères alphanumériques et des tirets".error);

		return v;
	},
	path : function(p) {
		if(!fs.existsSync(p))
			throw new Error("Le chemin spécifié n'est pas valide".error);

		return p;
	},
	ssl : function(ssl) {

		var nb = ssl.length, sslkeys = [];

		ssl = nb != 0 ? ssl.split(' ') : '';

		nb = ssl.length;

		if(nb == 2) {
			while(nb--) {
				var ext = pathInfo.extname(ssl[nb]);
				if(ext != '.pem' && ext != '.key')
					throw new Error("Il faut un fichier pem et un fichier key".error);
		
				sslkeys[nb] = {path : ssl[nb], ext: ext};
			}

		} else if(nb == 1)
			throw new Error("Il faut un fichier pem et un fichier key".error);
		
		if(sslkeys.length == 0)
			sslkeys = ssl;

		return sslkeys;
	}
};

var torrent = {
	rutorrent : function(done) {
		var shell_path = __dirname + '/app/scripts/rutorrent/install.sh';
		fs.chmodSync(shell_path, '775');
		
		var running = spawn(shell_path);

		running.stdout.on('data', function (data) {
			var string = new Buffer(data).toString();
			console.log(string.info);
		});

		running.stderr.on('data', function (data) {
			var string = new Buffer(data).toString();
			if(cache.get('force') === true)
				console.log(string.error);
			else
				throw string.error;
		});

		running.on('exit', function (code) {
			console.log('Installation de rutorrent terminée'.info);
			done(null, {client: 'rutorrent'});
		});
	},
	transmission : function(done) {
		var shell_path = __dirname + '/app/scripts/transmission/install.sh';
		fs.chmodSync(shell_path, '775');
		
		var running = spawn(shell_path);

		running.stdout.on('data', function (data) {
			var string = new Buffer(data).toString();
			console.log(string.info);
		});

		running.stderr.on('data', function (data) {
			var string = new Buffer(data).toString();
			if(cache.get('force') === true)
				console.log(string.error);
			else
				throw string.error;
		});

		running.on('exit', function (code) {
			console.log('Installation de transmission terminée'.info);
			done(null, {client : 'transmission'});
		});
	},
	aucun : function(done) {
		done(null,null);
	}
};

var userdel = {
	rutorrent : function(username, done) {
		var shell_path = __dirname + '/app/scripts/rutorrent/userdel.sh';
		fs.chmodSync(shell_path, '775');
		
		var running = spawn(shell_path, [username]);

		running.stdout.on('data', function (data) {
			var string = new Buffer(data).toString();
			console.log(string.info);
		});

		running.stderr.on('data', function (data) {
			var string = new Buffer(data).toString();
			if(cache.get('force') === true)
				console.log(string.error);
			else
				throw string.error;
		});

		running.on('exit', function (code) {
			db.user.delete(username, function(err) {
		 		console.log("Utilisateur "+ username + " supprimé".info);
		 		done(null, {client : 'rutorrent'});
		 	});
		});
	},
	transmission: function(username, done) {
		var shell_path =__dirname + '/app/scripts/transmission/userdel.sh';
		fs.chmodSync(shell_path, '775');

		var running = spawn(shell_path, [username]);

		running.stdout.on('data', function (data) {
			var string = new Buffer(data).toString();
			console.log(string.info);
		});

		running.stderr.on('data', function (data) {
			var string = new Buffer(data).toString();
			if(cache.get('force') === true)
				console.log(string.error);
			else
				throw string.error;
		});

		running.on('exit', function (code) {
			db.user.delete(username, function(err) {
		 		console.log("Utilisateur "+ username + " supprimé".info);
		 		done(null, {client : 'transmission'});
		 	});
		});
	}
};

var useradd = {
	rutorrent : function(username, password, done) {
		var shell_path =__dirname + '/app/scripts/rutorrent/useradd.sh';
		fs.chmodSync(shell_path, '775');

		var running = spawn(shell_path, [username, password])
		  , path = cache.get('path') ? cache.get('path') : '/home'
		  , userPath = pathInfo.join(path, username, 'downloads');

		running.stdout.on('data', function (data) {
			var string = new Buffer(data).toString();
			console.log(string.info);
		});

		running.stderr.on('data', function (data) {
			var string = new Buffer(data).toString();

			if(cache.get('force') === true)
				console.log(string.error);
			else
				throw string.error;
		});

		running.on('exit', function (code) {
			db.path.save(userPath, username, function(err, p) {
		 		console.log("Chemin "+ userPath + " sauvegardé en base de données".info);
		 		done(null, {client : 'rutorrent'});
		 	});
		});
	},
	transmission : function(username, password, done) {
		var shell_path = __dirname + '/app/scripts/transmission/useradd.sh';
		fs.chmodSync(shell_path, '775');

		var running = spawn(shell_path, [username, password])
		  , path = cache.get('path') ? cache.get('path') : '/home'
		  , userPath = pathInfo.join(path, username, 'downloads');

		running.stdout.on('data', function (data) {
			var string = new Buffer(data).toString();
			console.log(string.info);
		});

		running.stderr.on('data', function (data) {
			var string = new Buffer(data).toString();

			if(cache.get('force') === true)
				console.log(string.error);
			else
				throw string.error;
		});

		running.on('exit', function (code) {
			console.log("Ajout de l'utilisateur tranmsission terminé, remplacement des configurations".info);
			var settings = __dirname + '/app/scripts/transmission/config/settings.'+username+'.json';

			fs.readFile(settings, function (err, data) {
				if (err) throw err;
				var d = JSON.parse(data);

				//Default settings replacement
				d['ratio-limit-enabled'] = true;
				d['incomplete-dir-enabled'] = true;
				d['incomplete-dir'] = pathInfo.join(path, username, 'incomplete');
				d['peer-port-random-on-start'] = true;
				d['lpd-enabled'] = true;
				d['peer-socket-tos'] = 'lowcost';
				d['rpc-password'] = password;
				d['rpc-enabled'] = true;
				d['rpc-whitelist-enabled'] = false;
				d['rpc-authentication-required'] = true;
				d['rpc-username'] = username;

				d['download-dir'] = userPath;

				db.users.count(function (err, count) {

					d['rpc-port'] = d['rpc-port'] + count;

					fs.writeFileSync(settings, JSON.stringify(d));

					console.log('Démarage du daemon transmission'.info);

					fs.chmodSync(__dirname +'/app/scripts/transmission/daemon.sh', '775');

					exec(__dirname +'/app/scripts/transmission/daemon.sh', 
				    	['start', username],
				    	null,
				    	function(err, stdout, sdterr) {
				    		db.path.save(userPath, username, function(err, p) {
						 		console.log("Chemin "+ userPath + " sauvegardé en base de données".info);
						 		done(null, {client : 'transmission'});
						 	});
						}
					);

				});
			});

		});
	}
		   
};

/**
 * Main install wrapper
 * @type {Object}
 */
var install = {
	admin_creation: function(callback){
		console.log("Entrez les informations de l'admin".info);

		promptly.prompt('Username : ', { validator: validators.user}, function (err, username) {
		    promptly.password('Password : ', function(err, password) {
		    	db.users.create(username, password, function(err, user) {
		    		console.log("Utilisateur ajouté à la base de données d'ezseed".info);
		    		cache.put('user', {username : username, password : password});
		    		callback(null,{});
		    	});
		    });
		});
	},
	save_path: function(callback){
		
		console.log("Le dossier ci-dessous sert à partager les fichiers avec nodejs, si vous n'êtes pas sûr laissez par défaut.".warn);

		promptly.prompt('Chemin des dossiers à parser [/home] :', {validator : validators.path, default: '/home'}, function(err, path) {

			var config = {
					"path": path,
					"fetchTime": 5000,
					"root": "",
					"location": "",
					"torrentLink": "embed",
					"diskSpace": "1048576",
					"videoPlayer": "divx",
					"availableSpace": "1 TB"
				};

			jf.writeFileSync(__dirname + '/app/config.json', config);

			console.log("Création d'un lien symbolique sur app/public/downloads".info);

			exec('ln -sf '+ path +' ' + __dirname + '/app/public/downloads',
			  	function (error, stdout, stderr) {
			  		cache.put('path', path);
				    callback(null, {});
				}
			);
		});


	},
	nginx_conf: function(callback) {

		console.log("ex : ./ssl.pem ./ssl.key - séparé par un espace (ou laissez vide pour la générer)".info);
		
		promptly.prompt("Entrez une clé SSL :", {validator : validators.ssl}, function(err, sslkeys) {
			var l = sslkeys.length;

			if(l == 2) {	
				var cmd = new Buffer("\
						mv " + sslkeys[0].path + " " + __dirname + "/ezseed" + sslkeys[0].ext + " && \
						mv " + sslkeys[1].path + " " + __dirname + "/ezseed" + sslkeys[1].ext + " && \
						mv *ezseed.key ezseed.pem* /usr/local/local/nginx/").toString();

				exec(cmd, function(error, stdout, stderr) {
					console.log(stderr);
					exec("cat "+__dirname+"/app/scripts/nginx.conf > /etc/nginx/nginx.conf", function(error, stdout, stderr) {
						callback(null, {});
					});
				});
					 
			} else {
				var cmd = "openssl req -new -x509 -days 365 -nodes -out /usr/local/nginx/ezseed.pem -keyout /usr/local/nginx/ezseed.key -subj '/CN=ezseed/O=EzSeed/C=FR'";
				exec(cmd, function(error, stdout, stderr) {
					exec("cat "+__dirname+"/app/scripts/nginx.conf > /etc/nginx/nginx.conf", function(error, stdout, stderr) {
						callback(null, {});
					});
				});
			}

		});

	},
	client_torrent: function(callback, client) {
		if(client) {
			torrent[client](function(client) {
				callback(null, client);
			});
		} else {
			promptly.choose('Choisissez le client torrent à installer {rutorrent|transmission|[aucun]} : ', ['rutorrent', 'transmission', 'aucun'], {default : 'aucun'}, function (err, client) {
			    torrent[client](function(client) {
			    	callback(null, client);
			    });
			});
		}
	}
};

program
	.command('install')
	.option('-f, --force', 'force install (will not throw errors)')
	.action(function(options) {
		if(options.force)
			cache.put('force', true);
		
		async.series(install,
		function(err, results) {
			if(results.client_torrent === null) {
				console.log("Aucun client torrent spécifié, fin de l'installation".info);
				process.exit(1);
			} else {
				console.log("Création du compte " + results.client_torrent.client + " pour l'administrateur".info);
				
				var u = cache.get('user');
				useradd[results.client_torrent.client](u.username, u.password, function() {
					cache.clear();
					console.log("Vous pouvez maintenant démarrer ezseed ! pm2 start ezseed.json".info);
				});
			}
		  
		});
	});

program
	.command('torrent [client]')
	.description('Installation du client torrent')
	.action(function(client) {
		install.client_torrent(function(err, obj) {
			cache.clear();
			console.log('Client torrent installé'.info);
			process.exit(1);
		}, client);
	});

program
	.command('useradd <rutorrent|transmission> <username>')
	.option('-p, --password [password]', 'specify password')
	.option('-P, --path [path]', 'specify userdir path')
	.description("Ajout d'un utilisateur au client spécifié")
	.action(function(client, username, options) {
		if(options.path)
			cache.put('path', options.path);

		if(options.password === undefined) {
			promptly.password('Mot de passe :', function(err, pw) {
				useradd[client](username, options.password, function() {
					cache.clear();
					process.exit(1);
				});
			});
		} else 
			useradd[client](username, options.password, function() {
				cache.clear();
				process.exit(1);
			});
	});

program
	.command('userdel <rutorrent|transmission> <username>')
	.description("Suppression de l'utilisateur /!\\ tous les fichiers seront supprimés")
	.action(function(client, username) {
		userdel[client](username, function() {
			process.exit(1);
		});
	});

mongoose.connect('mongodb://localhost/ezseed');

var mongo = mongoose.connection;

mongo.on('error', console.error.bind(console, 'connection error:'.error));
mongo.once('open', function callback () {
	program.parse(process.argv);
	if (!program.args.length) program.help();
});


