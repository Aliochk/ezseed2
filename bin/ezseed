#!/usr/bin/env node

/**
 * Module dependencies.
 */
var pathInfo = require('path')
	, jf = require('jsonfile')
  	, app_path = pathInfo.resolve(__dirname, '..');


global.app_path = app_path;

global.config = jf.readFileSync(app_path + '/app/config.json');

//Writing conf file
if(global.config.root.length == 0) {
  global.config.root = app_path + '/app';
}

var program = require('commander')
  , colors = require('colors')
  , promptly = require('promptly')
  , exec = require('child_process').exec
  , execFile = require('child_process').execFile
  , spawn = require('child_process').spawn
  , _ = require('underscore')
  , fs = require('fs')
  , async = require('async')
  , db = require(app_path + '/app/core/database')
  , cache = require('memory-cache')
  , mongoose = require('mongoose')
  ;

colors.setTheme({
  silly: 'rainbow',
  input: 'grey',
  verbose: 'cyan',
  prompt: 'grey',
  info: 'cyan',
  data: 'grey',
  help: 'cyan',
  warn: 'yellow',
  debug: 'blue',
  error: 'red'
});

program
	.version('1.0.0');


program.on('--help', function(){

	var ASCII = new Buffer("\
		   ___  ___  ___  ___  ___  ___     _  _  ___    \n\
		  (  _)(_  )/ __)(  _)(  _)(   \\   ( )( )(__ \\   \n\
		   ) _) / / \\__ \\ ) _) ) _) ) ) )   \\\\// / __/   \n\
		  (___)(___)(___/(___)(___)(___/    (__) \\___)   \n\
		  									   \n\
	").toString();

	console.log(ASCII.yellow.bold);
	console.log("Made with love by ".magenta + "soyuka".bold.magenta);
	console.log("Big Thanks too : ".magenta + "Gaaa".rainbow +" (rutorrent), ".magenta +"Lines".rainbow +" (design), ".magenta +"Jay_kay".rainbow +" (ideas), ".magenta + "LeBedouin".rainbow +" ($$), ".magenta + "Winux".rainbow +", ".magenta + "H4T".rainbow +", ".magenta + "Ulule participants".rainbow +", ".magenta + "wouya (<3)".rainbow +" !".magenta)

	console.log(" ");
});


var validators =  require('./lib/validators');

/**
 * Main install wrapper
 * @type {Object}
 */
var install = {
	update_rc: function(callback) {
		console.log("Ajout du script de reboot automatique".info);
		exec("cp "+app_path+"/app/scripts/ezseed.sh /etc/init.d/ezseed.sh && chmod 755 /etc/init.d/ezseed.sh && update-rc.d ezseed.sh defaults", function(err, stdout, stderr) {
			callback(null, {});
		});
	},
	admin_creation: function(callback){
		if(cache.get('skipuser'))
			callback(null, {});
		else {
			console.log("Entrez les informations de l'admin".info);

			promptly.prompt('Username : ', {validator: validators.user}, function (err, username) {
			    promptly.password('Password : ', function(err, password) {
			    	db.users.create({username : username, password: password, client : 'aucun', role: 'admin'}, function(err, user) {
			    		console.log("Utilisateur ajouté à la base de données d'ezseed".info);
			    		cache.put('user', {username : username, password : password});
			    		callback(null,{});
			    	});
			    });
			});
		}
	},
	save_path: function(callback){
		
		console.log("Le dossier ci-dessous sert à partager les fichiers avec nodejs, si vous n'êtes pas sûr laissez par défaut.".warn);

		promptly.prompt('Chemin des dossiers à parser [/home] :', {validator : validators.path, default: '/home'}, function(err, path) {

			var config = {
					"path": path,
					"fetchTime": 5000,
					"root": "",
					"location": "",
					"torrentLink": "embed",
					"diskSpace": "1048576",
					"availableSpace": "1 TB",
					"transmission":false,
  					"rutorrent":false,
					"theme": "default"
				};

			jf.writeFileSync(app_path + '/app/config.json', config);

			console.log("Création d'un lien symbolique sur app/public/downloads".info);

			exec('ln -sfn '+ path +' ' + app_path + '/app/public/downloads',
			  	function (error, stdout, stderr) {
			  		cache.put('path', path);
				    callback(null, {});
				}
			);
		});


	},
	nginx_conf: function(callback) {

		if(cache.get('skipnginx'))
			callback(null, {})
		else {

			console.log("ex : ./ssl.pem ./ssl.key - séparé par un espace (ou laissez vide pour la générer)".info);
			promptly.prompt("Entrez une clé SSL :", {validator : validators.ssl, default: ""}, function(err, sslkeys) {
				var l = sslkeys.length;

				if(!fs.existsSync('/usr/local/nginx'))
					fs.mkdirSync('/usr/local/nginx', '755');

				if(l == 2) {	
					var cmd = new Buffer("\
							mv " + sslkeys[0].path + " " + app_path + "/ezseed" + sslkeys[0].ext + " && \
							mv " + sslkeys[1].path + " " + app_path + "/ezseed" + sslkeys[1].ext + " && \
							mv *ezseed.key ezseed.pem* /usr/local/nginx/").toString();

					exec(cmd, function(error, stdout, stderr) {
						if(cache.get('force') === true && !_.isEmpty(stderr))
							console.log(stderr.error);
						else if(!_.isEmpty(stderr))
							throw stderr.error;

						exec("cat "+app_path+"/app/scripts/nginx.conf > /etc/nginx/nginx.conf", function(error, stdout, stderr) {
							callback(null, {});
						});
					});
						 
				} else {
					var cmd = "openssl req -new -x509 -days 365 -nodes -out /usr/local/nginx/ezseed.pem -keyout /usr/local/nginx/ezseed.key -subj '/CN=ezseed/O=EzSeed/C=FR'";
					exec(cmd, function(error, stdout, stderr) {
						exec("cat "+app_path+"/app/scripts/nginx.conf > /etc/nginx/nginx.conf && service nginx restart", function(error, stdout, stderr) {
							callback(null, {});
						});
					});
				}

			});
		}

	},
	client_torrent: function(callback, client) {
		if(client) {
			require('./lib/install')[client](function(err, results) {
				callback(null, results);
			});
		} else {

			var choose = function(callback) {
				promptly.choose('Choisissez le client torrent à installer {rutorrent|transmission|[aucun]} : ', ['rutorrent', 'transmission', 'aucun'], {default : 'aucun'}, function (err, client) {
					if(client == 'aucun') {
						promptly.confirm("Êtes vous sûr de ne pas vouloir installer de client ? (l'utilisateur système ne sera pas créé) Y/n", {default : 'y'}, function (err, value) {
						    if(value === true) {
						    	require('./lib/install')[client](function(err, results) {
							    	callback(null, results);
							    });
							} else {
								choose();
							}
						});
					} else {
						if(cache.get('notorrent') === true)
							callback(null, client);
						else
						    require('./lib/install')[client](function(err, results) {
						    	callback(null, results);
						    });
					}
				});
			}

			choose(callback);
			
		}
	}
};

var password = {
	rutorrent : function(username, password, done) {
		
		var shell_path = pathInfo.join(app_path,'/app/scripts/rutorrent/password.sh');

		fs.chmodSync(shell_path, '755');

		execFile(shell_path, [username, password], function(err, stdout, stderr) {
			db.users.update(username, {password : password}, done);
		});

	},
	transmission : function(username, password, done) {
		//stopping daemon
		daemon('transmission', 'stop', username, function() {
			var shell_path = pathInfo.join(app_path,'/app/scripts/transmission/password.sh');

			fs.chmodSync(shell_path, '755');

			execFile(shell_path, [username, password], function(err, stdout, stderr) {

				var settings = app_path + '/app/scripts/transmission/config/settings.'+username+'.json';

				var d = jf.readFileSync(settings);

				d['rpc-password'] = password;

				jf.writeFileSync(settings, d);

				//restarting daemon
				daemon('transmission', 'start', username, function() {
					db.users.update(username, {password : password}, done);
				});

			});
		});
	},
	aucun : function(username, password, done) {
		db.users.update(username, {password : password}, done);
	}
}

var resetWatcher = function(cb) {
	exec('pm2', ['restart', 'watcher'], function() {
		return typeof cb == 'function' ? cb() : true;
	});
}


var daemon = function(client, command, username, done) {
	var shell_path = pathInfo.join(app_path,'/app/scripts/', client,'/daemon.sh');
	fs.chmodSync(shell_path, '775');

	var running = spawn(shell_path, [command, username]);

	running.stdout.on('data', function (data) {
		var string = new Buffer(data).toString();
		console.log(string.info);
	});

	running.stderr.on('data', function (data) {
		var string = new Buffer(data).toString();
		console.log(string.error);
		
	});

	running.on('exit', function (code) {
		if(typeof done == 'function')
			done();
		else
			process.exit(code);
	});
}

var reboot = function() {
	var start = function(user, cb) {
		daemon(user.client, 'start', user.username, function() {
			console.info(user.username + " " + user.client + " started");
			cb();
		});
	}

	db.users.getAll(function(err, users) {
		async.each(users, start, function(err){
			process.exit(0);
		});
	});
}

program
	.command('config')
	.option('-u, --skipuser', 'Skip admin creation')
	.option('-n, --notorrent', 'Skip torrent client installation')
	.option('-s, --skipnginx', 'Skip nginx configuration')
	.action(function(options) {
		
		cache.put('force', true);
		
		if(options.notorrent)
			cache.put('notorrent', true);

		if(options.skipnginx)
			cache.put('skipnginx', true);

		if(options.skipuser)
			cache.put('skipuser', true);

		cache.put('isinstall', true);

		async.series(install,
		function(err, results) {
			if(results.client_torrent === null) {
				console.log("Aucun client torrent spécifié, fin de l'installation".info);
				console.log("Vous pouvez maintenant démarrer ezseed pm2 start ezseed.json !".info);
				process.exit(0);
			} else {

				console.log("Création du compte " + results.client_torrent + " pour l'administrateur".info);

				//Création de l'admin
				cache.put('role', 'admin');
				
				var u = cache.get('user');

				useradd[results.client_torrent](u.username, u.password, function() {
					db.users.update(u.username, {client : results.client_torrent}, function(err) {
						cache.clear();
						console.log("Vous pouvez maintenant démarrer ezseed ! pm2 start ezseed.json".info);
						process.exit(0);
					});
				});
			}
		  
		});
	});

program
	.command('install [client]')
	.description('Installation du client torrent')
	.action(function(client) {

		install.client_torrent(function(err, obj) {
			cache.clear();
			console.log('Client torrent installé'.info);
			process.exit(0);
		}, client);
	});

var deploy = require('./lib/deploy');

program
	.command('update')
	.description('Update ezseed')
	.option('--rtorrent', 'update rtorrent & libtorrent')
	.action(function(options) {
		if(options.rtorrent) {
			var shell_path = app_path + '/app/scripts/rutorrent/update.sh';
			fs.chmodSync(shell_path, '775');
		
			var running = spawn(shell_path);

			running.stdout.on('data', function (data) {
				var string = new Buffer(data).toString();
				console.log(string.info);
			});

			running.stderr.on('data', function (data) {
				var string = new Buffer(data).toString();
				console.log(string.error);
				
			});

			running.on('exit', function (code) {
				console.log('Mise à jour de rutorrent terminée'.info);
				var config = jf.readFileSync(app_path + '/app/config.json');
				
				config.rutorrent = true;

				jf.writeFileSync(app_path+'/app/config.json', config);

				process.exit(0);
			});
		} else {
			exec('cd '+app_path+ ' && git pull https://github.com/soyuka/ezseed2 && npm install', function(error) {


				if(error)
					console.log(error.error);

				console.log('Ezseed est à jour préparation des fichiers'.info);
		
				require('./lib/deploy')(function(err, response) {
					process.exit(0);
				});


			});
		}
	});

program
	.command('deploy')
	.action(deploy);

var useradd = require('./lib/useradd');

program
	.command('useradd <rutorrent|transmission|aucun> <username>')
	.option('-p, --password [password]', 'specify password')
	.option('-P, --path [path]', 'specify userdir path [depreceated]')
	.option('-r, --role <role>', '<admin|[user]>')
	.description("Ajout d'un utilisateur au client spécifié")
	.action(function(client, username, options) {

		if(fs.existsSync(app_path + '/app/config.json')) {
			var config = jf.readFileSync(app_path + '/app/config.json');

			if(client == "aucun" || config[client] == true) {

				if(options.path)
					cache.put('path', options.path);

				cache.put('force', true);

				var next = function(options) {

					if(options.password === undefined) {
						promptly.password('Mot de passe :', function(err, pw) {
							useradd[client](username, pw, function() {
								resetWatcher(function() {
									cache.clear();
									process.exit(0);
								});
							});
						});
					} else 
						useradd[client](username, options.password, function() {
							resetWatcher(function() {
								cache.clear();
								process.exit(0);
							});
						});
				};

				if(options.role) {

					if(options.role.length) {
						cache.put('role', options.role);
						next(options);
					} else {
						promptly.choose('Choisissez le role utilisateur {user|admin} : ', ['user', 'admin'], {default : 'user'}, function (err, role) {
							cache.put('role', role);
							next(options);
						});
					}
				} else
					next(options);

				
			} else {
				console.log("Le client " + client + " n'est pas installé !".error);
				process.exit(1);
			}
		} else {
			console.log("Le fichier de configuration n'existe pas, lancez ./ezseed install".error);
			process.exit(1);
		}

	});

program
	.command('userdel <rutorrent|transmission> <username>')
	.description("Suppression de l'utilisateur /!\\ tous les fichiers seront supprimés")
	.action(function(client, username, options) {
		cache.put('force', true);

		rqeuire('./lib/userdel')[client](username, function() {
			process.exit(0);
		});
	});

program
	.command('password <rutorrent|transmission> <username> ')
	.option('-p, --password [password]', 'specify password')
	.description('Change username password')
	.action(function(client, username, options) {

		if(options.password === undefined) {
			promptly.password('Mot de passe :', function(err, pw) {
				password[client](username, pw, function() {
					cache.clear();
					process.exit(0);
				});
			});
		} else {
			password[client](username, options.password, function() {
				cache.clear();
				process.exit(0);
			});
		}
	})

//TODO: daemon username start same everywhere
program
	.command('daemon <rutorrent|transmission> <command> <username>')
	.description('start|stop|restart daemon-client for specified username')
	.action(daemon);

program
	.command('rtorrent <start|stop|restart>')
	.option('-u, --user <username>', 'username')
	.description('stop rtorrent daemon(s)')
	.action(function(cmd, options) {

		if(options.user) {

			daemon('rutorrent', cmd, options.user, function() {

				process.exit(0);

			});

		} else {

			db.users.getAll(function(err, users) {

				async.each(users,

					function(user, cb) {

						if(user.client == 'rutorrent') {

							daemon('rutorrent', cmd, user.username, function() {

								console.info(user.username + " " + cmd + "ed");
								cb();

							});

						} else {
							console.info(user.username + "is using "+user.client+", skipping");
							cb();
						}

					},
					function(err) {

						if(err) console.error(err);

						console.info("Success");
						process.exit(0);

				});

			});
		}
	})

program
	.command('reboot')
	.description('Restart all daemons')
	.action(reboot);

mongoose.connect('mongodb://localhost/ezseed');

var mongo = mongoose.connection;

mongo.on('error', console.error.bind(console, 'connection error:'.error));
mongo.once('open', function callback () {
	program.parse(process.argv);
	if (!program.args.length) program.help();
});

// module.exports = {useradd : useradd};
